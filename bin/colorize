#!/usr/bin/env python3
"""Color each output line based on the part of the line that matches PATTERN.

If PATTERN contains one or more capturing groups, only the final capturing
group will be used as the matching part of the line. Otherwise, the entire
match will be used.
"""
import argparse
import re
import sys
from itertools import chain, cycle, groupby, repeat

COLORS = [
    "#518921",  # green
    "#3982ce",  # blue
    "#a79026",  # yellow
    "#b44738",  # red
    "#806acc",  # violet
    "#008f89",  # cyan
    "#af6423",  # orange
    "#ae4fa3",  # magenta
    "#707070",  # dim white
    "#6ea63f",  # bright green
    "#5799e7",  # bright blue
    "#c9b047",  # bright yellow
    "#d2614f",  # bright red
    "#957fe3",  # bright violet
    "#00b2ab",  # bright cyan
    "#cd7e3c",  # bright orange
    "#c866bb",  # bright magenta
]
FALLBACK_COLOR = "#505050"  # grey


def colors(once: bool):
    color_iter = chain(COLORS, repeat(FALLBACK_COLOR)) if once else cycle(COLORS)
    for color in color_iter:
        r = int(color[1:3], 16)
        g = int(color[3:5], 16)
        b = int(color[5:7], 16)
        yield f"\x1b[38;2;{r};{g};{b}m"


def assign_colors(groups_iter, *, once: bool):
    assignments = {}
    colors_iter = colors(once)
    for key, lines in groups_iter:
        if key:
            if key not in assignments:
                assignments[key] = next(colors_iter)
            yield assignments[key], (key, lines)
        else:
            yield None, (key, lines)


def cycle_colors(groups_iter, *, once: bool):
    colors_iter = colors(once)
    for key, lines in groups_iter:
        if key:
            yield next(colors_iter), (key, lines)
        else:
            yield None, (key, lines)


def main():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "pattern",
        default=r"^[\w.-/]+",
        metavar="PATTERN",
        nargs="?",
        type=re.compile,
        help="what to match (default: ^[\w.-/]+)",
    )
    parser.add_argument(
        "--cycle",
        action="store_true",
        help="shift color when key changes instead of assigning colors to keys",
    )
    parser.add_argument(
        "--once",
        action="store_true",
        help="assign each color once; then stop coloring",
    )
    args = parser.parse_args()

    looper = cycle_colors if args.cycle else assign_colors
    matcher = args.pattern.search

    def key(line):
        match = matcher(line)
        if match:
            if match.lastindex is not None:
                return match[match.lastindex]
            else:
                return match[0]
        return None

    for color, (key, lines) in looper(groupby(sys.stdin, key=key), once=args.once):
        for line in lines:
            line = line.rstrip("\n")
            if color:
                print(f"{color}{line}\x1b[0m")
            else:
                print(f"{line}")


if __name__ == "__main__":
    main()
